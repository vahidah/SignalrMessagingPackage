// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data_base/model_contact.dart';
import 'data_base/model_group.dart';
import 'data_base/model_message.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(4, 637314664526053407),
      name: 'Contact',
      lastPropertyId: const IdUid(4, 6429930105337795719),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5645400157283071592),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 687687032383943316),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4059285666848700917),
            name: 'imageType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6429930105337795719),
            name: 'phoneNumber',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5545359217058353260),
      name: 'Message',
      lastPropertyId: const IdUid(7, 5289127305880014439),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1815969240826369),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6288614738311781577),
            name: 'receiverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3235977672677165811),
            name: 'senderUserName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4165485430459055895),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5098686761668459152),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5289127305880014439),
            name: 'senderPhoneNumber',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 6907580500814388729),
      name: 'Group',
      lastPropertyId: const IdUid(4, 5710658985835394472),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6901990270631233171),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3791252356577755206),
            name: 'groupID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3702577734483323669),
            name: 'groupName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5710658985835394472),
            name: 'imageType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 6907580500814388729),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1905105460055970584,
        4326848862098983318,
        5646975722548021592
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7997732721906611150,
        1498064663591360504,
        9165545013072988725,
        4877729840467155073,
        6758483133818294873,
        585609381998393805,
        6642736454832914930,
        8087694414283662120,
        6820143125403607510,
        7668693127131540302,
        7408033311899592472
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Contact: EntityDefinition<Contact>(
        model: _entities[0],
        toOneRelations: (Contact object) => [],
        toManyRelations: (Contact object) => {},
        getId: (Contact object) => object.id,
        setId: (Contact object, int id) {
          object.id = id;
        },
        objectToFB: (Contact object, fb.Builder fbb) {
          final userNameOffset = object.userName == null
              ? null
              : fbb.writeString(object.userName!);
          final imageTypeOffset = object.imageType == null
              ? null
              : fbb.writeString(object.imageType!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userNameOffset);
          fbb.addOffset(2, imageTypeOffset);
          fbb.addOffset(3, phoneNumberOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Contact(
              userName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              phoneNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..imageType = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8);

          return object;
        }),
    Message: EntityDefinition<Message>(
        model: _entities[1],
        toOneRelations: (Message object) => [],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.id,
        setId: (Message object, int id) {
          object.id = id;
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final receiverIdOffset = fbb.writeString(object.receiverId);
          final senderUserNameOffset = fbb.writeString(object.senderUserName);
          final messageOffset = fbb.writeString(object.message);
          final senderPhoneNumberOffset =
              fbb.writeString(object.senderPhoneNumber);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, receiverIdOffset);
          fbb.addOffset(3, senderUserNameOffset);
          fbb.addOffset(4, messageOffset);
          fbb.addInt64(5, object.date?.millisecondsSinceEpoch);
          fbb.addOffset(6, senderPhoneNumberOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = Message(
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              receiverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              senderPhoneNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              senderUserName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              date: dateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dateValue))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Group: EntityDefinition<Group>(
        model: _entities[2],
        toOneRelations: (Group object) => [],
        toManyRelations: (Group object) => {},
        getId: (Group object) => object.id,
        setId: (Group object, int id) {
          object.id = id;
        },
        objectToFB: (Group object, fb.Builder fbb) {
          final groupIDOffset =
              object.groupID == null ? null : fbb.writeString(object.groupID!);
          final groupNameOffset = object.groupName == null
              ? null
              : fbb.writeString(object.groupName!);
          final imageTypeOffset = object.imageType == null
              ? null
              : fbb.writeString(object.imageType!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, groupIDOffset);
          fbb.addOffset(2, groupNameOffset);
          fbb.addOffset(3, imageTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Group(
              groupName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              groupID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..imageType = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// see [Contact.id]
  static final id = QueryIntegerProperty<Contact>(_entities[0].properties[0]);

  /// see [Contact.userName]
  static final userName =
      QueryStringProperty<Contact>(_entities[0].properties[1]);

  /// see [Contact.imageType]
  static final imageType =
      QueryStringProperty<Contact>(_entities[0].properties[2]);

  /// see [Contact.phoneNumber]
  static final phoneNumber =
      QueryStringProperty<Contact>(_entities[0].properties[3]);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// see [Message.id]
  static final id = QueryIntegerProperty<Message>(_entities[1].properties[0]);

  /// see [Message.receiverId]
  static final receiverId =
      QueryStringProperty<Message>(_entities[1].properties[1]);

  /// see [Message.senderUserName]
  static final senderUserName =
      QueryStringProperty<Message>(_entities[1].properties[2]);

  /// see [Message.message]
  static final message =
      QueryStringProperty<Message>(_entities[1].properties[3]);

  /// see [Message.date]
  static final date = QueryIntegerProperty<Message>(_entities[1].properties[4]);

  /// see [Message.senderPhoneNumber]
  static final senderPhoneNumber =
      QueryStringProperty<Message>(_entities[1].properties[5]);
}

/// [Group] entity fields to define ObjectBox queries.
class Group_ {
  /// see [Group.id]
  static final id = QueryIntegerProperty<Group>(_entities[2].properties[0]);

  /// see [Group.groupID]
  static final groupID = QueryStringProperty<Group>(_entities[2].properties[1]);

  /// see [Group.groupName]
  static final groupName =
      QueryStringProperty<Group>(_entities[2].properties[2]);

  /// see [Group.imageType]
  static final imageType =
      QueryStringProperty<Group>(_entities[2].properties[3]);
}
